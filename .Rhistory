head(pop_sizes_simulation)
pop_sizes_simulation[1:10,1:10]
pop_sizes_simulation <- matrix(data= c(rep(x= start_pop_size, times= numreps), rep(x= 0, times = numreps*(tmax - 1))), ncol= numreps, byrow=TRUE)
for(i in 1:numreps){
for(j in 1:(tmax-1)){
pop_sizes_simulation[j+1,i] <- pop_sizes_simulation[j,i]*exp( r*( 1-(pop_sizes_simulation[j,i]/K)^theta) + sigma*rnorm(1, mean = 0, sd = 1))
}
}
numreps = 10 # numer of replicate population trajectories
pop_sizes_simulation <- matrix(data= c(rep(x= start_pop_size, times= numreps), rep(x= 0, times = numreps*(tmax - 1))), ncol= numreps, byrow=TRUE)
for(i in 1:numreps){
for(j in 1:(tmax-1)){
pop_sizes_simulation[j+1,i] <- pop_sizes_simulation[j,i]*exp( r*( 1-(pop_sizes_simulation[j,i]/K)^theta) + sigma*rnorm(1, mean = 0, sd = 1))
}
}
pop_sizes_simulation
tmax = 20     # time horizon in years
pop_sizes_simulation <- matrix(data= c(rep(x= start_pop_size, times= numreps), rep(x= 0, times = numreps*(tmax - 1))), ncol= numreps, byrow=TRUE)
for(i in 1:numreps){
for(j in 1:(tmax-1)){
pop_sizes_simulation[j+1,i] <- pop_sizes_simulation[j,i]*exp( r*( 1-(pop_sizes_simulation[j,i]/K)^theta) + sigma*rnorm(1, mean = 0, sd = 1))
}
}
pop_sizes_simulation
length(pop_sizes_simulation)
length(colnames(pop_sizes_simulation))
min_pop_sizes <- vector()
for(i in 1:numreps){
extant_pops <- min(pop_sizes_simulation[ ,i])
}
min_pop_sizes
pop_sizes_simulation
pop_sizes_simulation[ ,1]
pop_sizes_simulation[ ,2]
min_pop_sizes <- vector()
for(i in 1:numreps){
min_pop_sizes[i] <- min(pop_sizes_simulation[ ,i])
}
min_pop_sizes
ifelse(min_pop_sizes < Nx, "Extinct", "Extant")
table(ifelse(min_pop_sizes < Nx, "Extinct", "Extant"))
r = 0.3458    # intrinsic rate of increase
K = 846.0162  # carrying capacity
theta = 1     # nonlinearity in density dependence. takes a value of 1 for Ricker model
sigma2 = var(residuals(ricker))   # environmental variance. Note that the 'var' function in R, uses (n-1) in the denominator so it gives an unbiased estimate of the residual variance.
sigma = sqrt(sigma2) # multiplying 'sigma' by computer generated random values with a mean of zero and variance of one, will enable us to generate environmental variance that consists of normally distributed random numbers with a mean of zero and a variance of sigma2.
start_pop_size = 94       # last estimated population size
Nx = 20       # quasi-extinction threshold
tmax = 20     # time horizon in years
numreps = 50000 # numer of replicate population trajectories
### Simulation
pop_sizes_simulation <- matrix(data= c(rep(x= start_pop_size, times= numreps), rep(x= 0, times = numreps*(tmax - 1))), ncol= numreps, byrow=TRUE)
for(i in 1:numreps){
for(j in 1:(tmax-1)){
pop_sizes_simulation[j+1,i] <- pop_sizes_simulation[j,i]*exp( r*( 1-(pop_sizes_simulation[j,i]/K)^theta) + sigma*rnorm(1, mean = 0, sd = 1))
}
}
# identify which populations based below quasi extinction threshold during simulation
min_pop_sizes <- vector()
for(i in 1:numreps){
min_pop_sizes[i] <- min(pop_sizes_simulation[ ,i])
}
table(ifelse(min_pop_sizes < Nx, "Extinct", "Extant"))
20996/(29004+0996)
pop_sizes_simulation <- matrix(data= c(rep(x= start_pop_size, times= numreps), rep(x= 0, times = numreps*(tmax - 1))), ncol= numreps, byrow=TRUE)
for(i in 1:numreps){
for(j in 1:(tmax-1)){
pop_sizes_simulation[j+1,i] <- pop_sizes_simulation[j,i]*exp( r*( 1-(pop_sizes_simulation[j,i]/K)^theta) + sigma*rnorm(1, mean = 0, sd = 1))
}
}
# identify which populations based below quasi extinction threshold during simulation
min_pop_sizes <- vector()
for(i in 1:numreps){
min_pop_sizes[i] <- min(pop_sizes_simulation[ ,i])
}
table(ifelse(min_pop_sizes < Nx, "Extinct", "Extant"))
20895/50000
20996/50000
table_extant <- table(ifelse(min_pop_sizes < Nx, "Extinct", "Extant"))
table_extant
table_extant[1]
table_extant[2]/numreps
ambdas <- c(1.00, 1.98, 1.02, 0.92, 0.53) # different lambda values to use for simulation.  There can be as many as you want.  For this simulation, each will be drawn with an equal probability.
start_pop_size <- 29 # starting population size
tmax <- 100 # length of simulations
numreps <- 100 # number of replicate
simulated_lambdas_matrix <- matrix(data = 0, ncol = numreps, nrow = tmax - 1)
for(i in 1:numreps){
simulated_lambdas_matrix[ ,i] <- sample(x= lambdas, size = (tmax - 1), replace = TRUE)
}
pop_sizes_simulation <- matrix(data= c(rep(x= start_pop_size, times= numreps), rep(x= 0, times = numreps*(tmax - 1))), ncol= numreps, byrow=TRUE)
for(i in 1:numreps){
for(j in 1:(tmax-1)){
pop_sizes_simulation[j+1,i] <- simulated_lambdas_matrix[j,i]*pop_sizes_simulation[j,i]
}
}
pop_sizes_simulation[pop_sizes_simulation < 1] <- 0 # identified all instances where population size dipped below 1 individual and labeled it as extinct.
min_pop_size_each_rep_year5 <- vector()
for(i in 1:numreps){
min_pop_size_each_rep_year5[i] <- min(pop_sizes_simulation[1:5,i])
}
pop_sizes_simulation[5, ][min_pop_size_each_rep_year5 == 0] <- 0
pop_sizes_simulation[5, ][pop_sizes_simulation[5, ] > 200] <- 200
year_5_pop_sizes <- as.data.frame(pop_sizes_simulation[5, ])
year_5_hist <- ggplot(year_5_pop_sizes, aes(x=pop_sizes_simulation[5, ])) + geom_histogram() + xlab("")
min_pop_size_each_rep_year20 <- vector()
for(i in 1:numreps){
min_pop_size_each_rep_year20[i] <- min(pop_sizes_simulation[1:20,i])
}
pop_sizes_simulation[20, ][min_pop_size_each_rep_year20 == 0] <- 0
pop_sizes_simulation[20, ][pop_sizes_simulation[20, ] > 200] <- 200
year_20_pop_sizes <- as.data.frame(pop_sizes_simulation[20, ])
year_20_hist <- ggplot(year_20_pop_sizes, aes(x=pop_sizes_simulation[20, ])) + geom_histogram() + xlab("")
min_pop_size_each_rep_year100 <- vector()
for(i in 1:numreps){
min_pop_size_each_rep_year100[i] <- min(pop_sizes_simulation[1:100,i])
}
pop_sizes_simulation[100, ][min_pop_size_each_rep_year100 == 0] <- 0
pop_sizes_simulation[100, ][pop_sizes_simulation[100, ] > 200] <- 200
year_100_pop_sizes <- as.data.frame(pop_sizes_simulation[100, ])
year_100_hist <- ggplot(year_100_pop_sizes, aes(x=pop_sizes_simulation[100, ])) + geom_histogram() + xlab("Population size")
source('~/Documents/miscellaneous_R/multiplot.R')
multiplot(year_5_hist, year_20_hist, year_100_hist, cols=1)
count_PVA_lambda_variance_simulation <- function(mean_lambda, sd_lambda, start_size = 1000, tiempo = 50, reps = 1000) {
sim_lambdas_matrix <- matrix(data = rnorm(n = reps*(tiempo-1), mean = mean_lambda, sd = sd_lambda), ncol = reps, nrow = tiempo - 1)
pop_sizes_sim <- matrix(data= c(rep(x= start_size, times= reps), rep(x= 0, times = reps*(tiempo - 1))), ncol= reps, byrow=TRUE)
for(i in 1:reps){
for(j in 1:(tiempo-1)){
pop_sizes_sim[j+1,i] <- sim_lambdas_matrix[j,i]*pop_sizes_sim[j,i]
}
}
min_pop_size_each_rep_year50 <- vector()
for(i in 1:reps){
min_pop_size_each_rep_year50[i] <- min(pop_sizes_sim[1:50,i])
}
pop_sizes_sim[50, ][min_pop_size_each_rep_year50 < 1] <- 0
#pop_sizes_sim[50, ][pop_sizes_sim[50, ] < 1] <- 0
pop_sizes_sim[50, ][pop_sizes_sim[50, ] > 10000] <- 10000
hist(pop_sizes_sim[50, ], main = "Distribution of Population Sizes")
}
pop_sizes_sim
count_PVA_lambda_variance_simulation <- function(mean_lambda, sd_lambda, start_size = 1000, tiempo = 50, reps = 1000) {
sim_lambdas_matrix <- matrix(data = rnorm(n = reps*(tiempo-1), mean = mean_lambda, sd = sd_lambda), ncol = reps, nrow = tiempo - 1)
pop_sizes_sim <- matrix(data= c(rep(x= start_size, times= reps), rep(x= 0, times = reps*(tiempo - 1))), ncol= reps, byrow=TRUE)
for(i in 1:reps){
for(j in 1:(tiempo-1)){
pop_sizes_sim[j+1,i] <- sim_lambdas_matrix[j,i]*pop_sizes_sim[j,i]
}
}
min_pop_size_each_rep_year50 <- vector()
for(i in 1:reps){
min_pop_size_each_rep_year50[i] <- min(pop_sizes_sim[1:50,i])
}
pop_sizes_sim[50, ][min_pop_size_each_rep_year50 < 1] <- 0
#pop_sizes_sim[50, ][pop_sizes_sim[50, ] < 1] <- 0
pop_sizes_sim[50, ][pop_sizes_sim[50, ] > 10000] <- 10000
hist(pop_sizes_sim[50, ], main = "Distribution of Population Sizes")
}
simulated_lambdas_matrix <- matrix(data = 0, ncol = numreps, nrow = tmax - 1)
for(i in 1:numreps){
simulated_lambdas_matrix[ ,i] <- sample(x= lambdas, size = (tmax - 1), replace = TRUE)
}
pop_sizes_simulation <- matrix(data= c(rep(x= start_pop_size, times= numreps), rep(x= 0, times = numreps*(tmax - 1))), ncol= numreps, byrow=TRUE)
for(i in 1:numreps){
for(j in 1:(tmax-1)){
pop_sizes_simulation[j+1,i] <- simulated_lambdas_matrix[j,i]*pop_sizes_simulation[j,i]
}
}
pop_sizes_simulation[pop_sizes_simulation < 1] <- 0 # identified all instances where population size dipped below 1 individual and labeled it as extinct.
min_pop_size_each_rep_year5 <- vector()
for(i in 1:numreps){
min_pop_size_each_rep_year5[i] <- min(pop_sizes_simulation[1:5,i])
}
pop_sizes_simulation[5, ][min_pop_size_each_rep_year5 == 0] <- 0
pop_sizes_simulation[5, ][pop_sizes_simulation[5, ] > 200] <- 200
year_5_pop_sizes <- as.data.frame(pop_sizes_simulation[5, ])
year_5_hist <- ggplot(year_5_pop_sizes, aes(x=pop_sizes_simulation[5, ])) + geom_histogram() + xlab("")
min_pop_size_each_rep_year20 <- vector()
for(i in 1:numreps){
min_pop_size_each_rep_year20[i] <- min(pop_sizes_simulation[1:20,i])
}
pop_sizes_simulation[20, ][min_pop_size_each_rep_year20 == 0] <- 0
pop_sizes_simulation[20, ][pop_sizes_simulation[20, ] > 200] <- 200
year_20_pop_sizes <- as.data.frame(pop_sizes_simulation[20, ])
year_20_hist <- ggplot(year_20_pop_sizes, aes(x=pop_sizes_simulation[20, ])) + geom_histogram() + xlab("")
min_pop_size_each_rep_year100 <- vector()
for(i in 1:numreps){
min_pop_size_each_rep_year100[i] <- min(pop_sizes_simulation[1:100,i])
}
pop_sizes_simulation[100, ][min_pop_size_each_rep_year100 == 0] <- 0
pop_sizes_simulation[100, ][pop_sizes_simulation[100, ] > 200] <- 200
year_100_pop_sizes <- as.data.frame(pop_sizes_simulation[100, ])
year_100_hist <- ggplot(year_100_pop_sizes, aes(x=pop_sizes_simulation[100, ])) + geom_histogram() + xlab("Population size")
source('~/Documents/miscellaneous_R/multiplot.R')
multiplot(year_5_hist, year_20_hist, year_100_hist, cols=1)
# Geometric mean
mean_geom <- lambdas[1]^0.2 * lambdas[2]^0.2 * lambdas[3]^0.2 * lambdas[4]^0.2 * lambdas[5]^0.2 # predicts an almost stable population (lambda = 1)
return(mean_geom)
}
mean_geom <- lambdas[1]^0.2 * lambdas[2]^0.2 * lambdas[3]^0.2 * lambdas[4]^0.2 * lambdas[5]^0.2 # predicts an almost stable population (lambda = 1)
mean_geom
simulated_lambdas_matrix
multiplot(year_5_hist, year_20_hist, year_100_hist, cols=1)
count_PVA_lambda_variance_simulation <- function(mean_lambda, sd_lambda, start_size = 1000, tiempo = 50, reps = 1000) {
sim_lambdas_matrix <- matrix(data = rnorm(n = reps*(tiempo-1), mean = mean_lambda, sd = sd_lambda), ncol = reps, nrow = tiempo - 1)
pop_sizes_sim <- matrix(data= c(rep(x= start_size, times= reps), rep(x= 0, times = reps*(tiempo - 1))), ncol= reps, byrow=TRUE)
for(i in 1:reps){
for(j in 1:(tiempo-1)){
pop_sizes_sim[j+1,i] <- sim_lambdas_matrix[j,i]*pop_sizes_sim[j,i]
}
}
min_pop_size_each_rep_year50 <- vector()
for(i in 1:reps){
min_pop_size_each_rep_year50[i] <- min(pop_sizes_sim[1:50,i])
}
pop_sizes_sim[50, ][min_pop_size_each_rep_year50 < 1] <- 0
#pop_sizes_sim[50, ][pop_sizes_sim[50, ] < 1] <- 0
pop_sizes_sim[50, ][pop_sizes_sim[50, ] > 10000] <- 10000
hist(pop_sizes_sim[50, ], main = "Distribution of Population Sizes")
}
count_PVA_lambda_variance_simulation(mean_lambda = 1, sd_lambda = 0)
count_PVA_lambda_variance_simulation(mean_lambda = 1, sd_lambda = 0.1)
count_PVA_lambda_variance_simulation(mean_lambda = 1, sd_lambda = 1)
count_PVA_lambda_variance_simulation(mean_lambda = 1, sd_lambda = .5)
count_PVA_lambda_variance_simulation(mean_lambda = 1, sd_lambda = c(0.001,0.01,0.1))
count_PVA_lambda_variance_simulation(mean_lambda = 1, sd_lambda = 0.1)
count_PVA_lambda_variance_simulation(mean_lambda = 1, sd_lambda = 1)
pop_sizes_sim
count_PVA_lambda_variance_simulation <- function(mean_lambda, sd_lambda, start_size = 1000, tiempo = 50, reps = 1000) {
sim_lambdas_matrix <- matrix(data = rnorm(n = reps*(tiempo-1), mean = mean_lambda, sd = sd_lambda), ncol = reps, nrow = tiempo - 1) # creates a matrix of lambda values based on randomly selected values (specified by function parameters) from a normal distribution
pop_sizes_sim <- matrix(data= c(rep(x= start_size, times= reps), rep(x= 0, times = reps*(tiempo - 1))), ncol= reps, byrow=TRUE)
for(i in 1:reps){
for(j in 1:(tiempo-1)){
pop_sizes_sim[j+1,i] <- sim_lambdas_matrix[j,i]*pop_sizes_sim[j,i]
}
}
min_pop_size_each_rep_year50 <- vector()
for(i in 1:reps){
min_pop_size_each_rep_year50[i] <- min(pop_sizes_sim[1:50,i])
}
pop_sizes_sim[50, ][min_pop_size_each_rep_year50 < 1] <- 0
#pop_sizes_sim[50, ][pop_sizes_sim[50, ] < 1] <- 0
pop_sizes_sim[50, ][pop_sizes_sim[50, ] > 10000] <- 10000
hist(pop_sizes_sim[50, ], main = "Distribution of Population Sizes")
length(pop_sizes_sim[50, ] == 0)/reps
}
count_PVA_lambda_variance_simulation(1,0.1)
count_PVA_lambda_variance_simulation(1,0.5)
count_PVA_lambda_variance_simulation <- function(mean_lambda, sd_lambda, start_size = 1000, tiempo = 50, reps = 1000) {
sim_lambdas_matrix <- matrix(data = rnorm(n = reps*(tiempo-1), mean = mean_lambda, sd = sd_lambda), ncol = reps, nrow = tiempo - 1) # creates a matrix of lambda values based on randomly selected values (specified by function parameters) from a normal distribution
pop_sizes_sim <- matrix(data= c(rep(x= start_size, times= reps), rep(x= 0, times = reps*(tiempo - 1))), ncol= reps, byrow=TRUE)
for(i in 1:reps){
for(j in 1:(tiempo-1)){
pop_sizes_sim[j+1,i] <- sim_lambdas_matrix[j,i]*pop_sizes_sim[j,i]
}
}
min_pop_size_each_rep_year50 <- vector()
for(i in 1:reps){
min_pop_size_each_rep_year50[i] <- min(pop_sizes_sim[1:50,i])
}
pop_sizes_sim[50, ][min_pop_size_each_rep_year50 < 1] <- 0
#pop_sizes_sim[50, ][pop_sizes_sim[50, ] < 1] <- 0
pop_sizes_sim[50, ][pop_sizes_sim[50, ] > 10000] <- 10000
hist(pop_sizes_sim[50, ], main = "Distribution of Population Sizes")
table(pop_sizes_sim[50, ])
}
count_PVA_lambda_variance_simulation(1,0.5)
count_PVA_lambda_variance_simulation <- function(mean_lambda, sd_lambda, start_size = 1000, tiempo = 50, reps = 1000) {
sim_lambdas_matrix <- matrix(data = rnorm(n = reps*(tiempo-1), mean = mean_lambda, sd = sd_lambda), ncol = reps, nrow = tiempo - 1) # creates a matrix of lambda values based on randomly selected values (specified by function parameters) from a normal distribution
pop_sizes_sim <- matrix(data= c(rep(x= start_size, times= reps), rep(x= 0, times = reps*(tiempo - 1))), ncol= reps, byrow=TRUE)
for(i in 1:reps){
for(j in 1:(tiempo-1)){
pop_sizes_sim[j+1,i] <- sim_lambdas_matrix[j,i]*pop_sizes_sim[j,i]
}
}
min_pop_size_each_rep_year50 <- vector()
for(i in 1:reps){
min_pop_size_each_rep_year50[i] <- min(pop_sizes_sim[1:50,i])
}
pop_sizes_sim[50, ][min_pop_size_each_rep_year50 < 1] <- 0
#pop_sizes_sim[50, ][pop_sizes_sim[50, ] < 1] <- 0
pop_sizes_sim[50, ][pop_sizes_sim[50, ] > 10000] <- 10000
hist(pop_sizes_sim[50, ], main = "Distribution of Population Sizes")
table(pop_sizes_sim[50, ] == 0)
}
count_PVA_lambda_variance_simulation(1,0.5)
count_PVA_lambda_variance_simulation <- function(mean_lambda, sd_lambda, start_size = 1000, tiempo = 50, reps = 1000) {
sim_lambdas_matrix <- matrix(data = rnorm(n = reps*(tiempo-1), mean = mean_lambda, sd = sd_lambda), ncol = reps, nrow = tiempo - 1) # creates a matrix of lambda values based on randomly selected values (specified by function parameters) from a normal distribution
pop_sizes_sim <- matrix(data= c(rep(x= start_size, times= reps), rep(x= 0, times = reps*(tiempo - 1))), ncol= reps, byrow=TRUE)
for(i in 1:reps){
for(j in 1:(tiempo-1)){
pop_sizes_sim[j+1,i] <- sim_lambdas_matrix[j,i]*pop_sizes_sim[j,i]
}
}
min_pop_size_each_rep_year50 <- vector()
for(i in 1:reps){
min_pop_size_each_rep_year50[i] <- min(pop_sizes_sim[1:50,i])
}
pop_sizes_sim[50, ][min_pop_size_each_rep_year50 < 1] <- 0
#pop_sizes_sim[50, ][pop_sizes_sim[50, ] < 1] <- 0
pop_sizes_sim[50, ][pop_sizes_sim[50, ] > 10000] <- 10000
hist(pop_sizes_sim[50, ], main = "Distribution of Population Sizes")
table(ifelse(pop_sizes_sim[50, ] == 0, "Extinct","Extant"))
}
count_PVA_lambda_variance_simulation(1,0.5)
count_PVA_lambda_variance_simulation <- function(mean_lambda, sd_lambda, start_size = 1000, tiempo = 50, reps = 1000) {
sim_lambdas_matrix <- matrix(data = rnorm(n = reps*(tiempo-1), mean = mean_lambda, sd = sd_lambda), ncol = reps, nrow = tiempo - 1) # creates a matrix of lambda values based on randomly selected values (specified by function parameters) from a normal distribution
pop_sizes_sim <- matrix(data= c(rep(x= start_size, times= reps), rep(x= 0, times = reps*(tiempo - 1))), ncol= reps, byrow=TRUE)
for(i in 1:reps){
for(j in 1:(tiempo-1)){
pop_sizes_sim[j+1,i] <- sim_lambdas_matrix[j,i]*pop_sizes_sim[j,i]
}
}
min_pop_size_each_rep_year50 <- vector()
for(i in 1:reps){
min_pop_size_each_rep_year50[i] <- min(pop_sizes_sim[1:50,i])
}
pop_sizes_sim[50, ][min_pop_size_each_rep_year50 < 1] <- 0
#pop_sizes_sim[50, ][pop_sizes_sim[50, ] < 1] <- 0
pop_sizes_sim[50, ][pop_sizes_sim[50, ] > 10000] <- 10000
hist(pop_sizes_sim[50, ], main = "Distribution of Population Sizes")
pops_extinct <- table(ifelse(pop_sizes_sim[50, ] == 0, "Extinct","Extant"))
pops_extinct[2]/reps # cumulative probability of extinction
}
count_PVA_lambda_variance_simulation(1,0.5)
count_PVA_lambda_variance_simulation(1,0.1)
count_PVA_lambda_variance_simulation(1,0.2)
count_PVA_lambda_variance_simulation(1,0.5)
count_PVA_lambda_variance_simulation(1,0.3)
count_PVA_lambda_variance_simulation(1,0.4)
count_PVA_lambda_variance_simulation(.9,0.4)
count_PVA_lambda_variance_simulation(.9,0.1)
count_PVA_lambda_variance_simulation <- function(mean_lambda, sd_lambda, start_size = 1000, tiempo = 50, reps = 1000) {
sim_lambdas_matrix <- matrix(data = rnorm(n = reps*(tiempo-1), mean = mean_lambda, sd = sd_lambda), ncol = reps, nrow = tiempo - 1) # creates a matrix of lambda values based on randomly selected values (specified by function parameters) from a normal distribution
pop_sizes_sim <- matrix(data= c(rep(x= start_size, times= reps), rep(x= 0, times = reps*(tiempo - 1))), ncol= reps, byrow=TRUE)
for(i in 1:reps){
for(j in 1:(tiempo-1)){
pop_sizes_sim[j+1,i] <- sim_lambdas_matrix[j,i]*pop_sizes_sim[j,i]
}
}
min_pop_size_each_rep_year50 <- vector()
for(i in 1:reps){
min_pop_size_each_rep_year50[i] <- min(pop_sizes_sim[1:50,i])
}
pop_sizes_sim[50, ][min_pop_size_each_rep_year50 < 1] <- 0
#pop_sizes_sim[50, ][pop_sizes_sim[50, ] < 1] <- 0
pop_sizes_sim[50, ][pop_sizes_sim[50, ] > 10000] <- 10000
hist(pop_sizes_sim[50, ], main = "Distribution of Population Sizes")
pops_extinct <- table(ifelse(pop_sizes_sim[50, ] == 0, "Extinct","Extant"))
cum_prob_extinct <- pops_extinct[2]/reps # cumulative probability of extinction
names(cum_prob_extinct) <- "Cumulative probability of Extinction"
}
count_PVA_lambda_variance_simulation(.9,0.1)
count_PVA_lambda_variance_simulation <- function(mean_lambda, sd_lambda, start_size = 1000, tiempo = 50, reps = 1000) {
sim_lambdas_matrix <- matrix(data = rnorm(n = reps*(tiempo-1), mean = mean_lambda, sd = sd_lambda), ncol = reps, nrow = tiempo - 1) # creates a matrix of lambda values based on randomly selected values (specified by function parameters) from a normal distribution
pop_sizes_sim <- matrix(data= c(rep(x= start_size, times= reps), rep(x= 0, times = reps*(tiempo - 1))), ncol= reps, byrow=TRUE)
for(i in 1:reps){
for(j in 1:(tiempo-1)){
pop_sizes_sim[j+1,i] <- sim_lambdas_matrix[j,i]*pop_sizes_sim[j,i]
}
}
min_pop_size_each_rep_year50 <- vector()
for(i in 1:reps){
min_pop_size_each_rep_year50[i] <- min(pop_sizes_sim[1:50,i])
}
pop_sizes_sim[50, ][min_pop_size_each_rep_year50 < 1] <- 0
#pop_sizes_sim[50, ][pop_sizes_sim[50, ] < 1] <- 0
pop_sizes_sim[50, ][pop_sizes_sim[50, ] > 10000] <- 10000
hist(pop_sizes_sim[50, ], main = "Distribution of Population Sizes")
pops_extinct <- table(ifelse(pop_sizes_sim[50, ] == 0, "Extinct","Extant"))
cum_prob_extinct <- pops_extinct[2]/reps # cumulative probability of extinction
names(cum_prob_extinct) <- "Cumulative probability of Extinction"
print(cum_prob_extinct)
}
count_PVA_lambda_variance_simulation(.9,0.1)
mu = 0.1 # mean log population growth rate
s2 = 0.1 # variance of log population growth rate
c = mu/s2
# Plot mean time to extinction (N=1) vs. K for populations starting at K, according to equation 4.4
K = seq(1,50, by = 0.1)
k = log(K)
Tbar = (K^(2*c) - 1 - 2*c*k)/(2*mu*c) # Eq. 4.4
plot(K, Tbar, type = 'l', xlab="Carrying Capacity, K", ylab="Mean time to extinction, Tbar", main="Populations starting at K")
# Plot mean time to extinction (N=1) vs. Nc for populations starting at various Nc <= K, according to equation 4.3
K=200
Nc=seq(1,K, by=1)
k=log(K)
d=log(Nc)
Tbar=(exp(2*c*k)*(1-exp(-2*c*d))-2*c*d) / (2*mu*c) # Eq 4.3
plot(Nc, Tbar, type = 'l', xlab = "Initial population size, Nc", ylab = "Mean time to extinction, Tbar", main = "Populations starting below K = 200")
# R code to plot the mean time to extinction for the ceiling model as functions of the carrying capacity and at four different growth rate variances
mu = 0.1 # positive population growth rate
s2_1 = mu # variance of log population growth rate
s2_2 = 2*mu
s2_3 = 4*mu
s2_4 = 8*mu
c1 = mu/s2_1
c2 = mu/s2_2
c3 = mu/s2_3
c4 = mu/s2_4
# Plot mean time to extinction (N=1) vs. K for populations starting at K, according to equation 4.4
K = seq(1,50, by = 0.1)
k = log(K)
Tbar1 = (K^(2*c1) - 1 - 2*c1*k)/(2*mu*c1) # Eq. 4.4
Tbar2 = (K^(2*c2) - 1 - 2*c2*k)/(2*mu*c2)
Tbar3 = (K^(2*c3) - 1 - 2*c3*k)/(2*mu*c3)
Tbar4 = (K^(2*c4) - 1 - 2*c4*k)/(2*mu*c3)
K_Tbar_matrix <- cbind(K, Tbar1, Tbar2, Tbar3, Tbar4)
matplot(K_Tbar_matrix[ ,1], K_Tbar_matrix[ ,2:5], type = "l", col=1:3, ylim=c(0,200), main="Effect of variance on mean time to extinction (Tbar)", ylab="Mean time to exinction, Tbar", xlab = "Carrying capacity, K")
legend("topright", legend = c("s2 = mu", "s2 = 2*mu", "s2 = 4*mu", "s2 = 8*mu"), lty=1:3, col=1:3, bty="n")
# R code to plot the mean time to extinction for the ceiling model as functions of the carrying capacity and at three different population growth rates
mu1 = 0.1 # positive population growth rate
mu2 = 0.001 # barely positive population growth rate. Note that if mu = 0, then there is no feasible solution to the Tbar equation.
mu3 = -0.1 # negative population growth rate
s2 = 0.1 # variance of log population growth rate
c1 = mu1/s2
c2 = mu2/s2
c3 = mu3/s2
# Plot mean time to extinction (N=1) vs. K for populations starting at K, according to equation 4.4
K = seq(1,50, by = 0.1)
k = log(K)
Tbar1 = (K^(2*c1) - 1 - 2*c1*k)/(2*mu1*c1) # Eq. 4.4
Tbar2 = (K^(2*c2) - 1 - 2*c2*k)/(2*mu2*c2)
Tbar3 = (K^(2*c3) - 1 - 2*c3*k)/(2*mu3*c3)
K_Tbar_matrix <- cbind(K, Tbar1, Tbar2, Tbar3)
matplot(K_Tbar_matrix[ ,1], K_Tbar_matrix[ ,2:4], type = "l", col=1:3, ylim=c(0,200), main="Effect of mu on mean time to extinction (Tbar)", ylab="Mean time to exinction, Tbar", xlab = "Carrying capacity, K")
legend("topright", legend = c("mu = 0.1", "mu = 0.001", "mu = -0.1"), lty=1:3, col=1:3, bty="n")
# R code to plot the mean time to extinction for the ceiling model as functions of the carrying capacity and initial population size
mu = 0.1 # mean log population growth rate
s2 = 0.1 # variance of log population growth rate
c = mu/s2
# Plot mean time to extinction (N=1) vs. K for populations starting at K, according to equation 4.4
K = seq(1,50, by = 0.1)
k = log(K)
Tbar = (K^(2*c) - 1 - 2*c*k)/(2*mu*c) # Eq. 4.4
plot(K, Tbar, type = 'l', xlab="Carrying Capacity, K", ylab="Mean time to extinction, Tbar", main="Populations starting at K")
# Plot mean time to extinction (N=1) vs. Nc for populations starting at various Nc <= K, according to equation 4.3
K=200
Nc=seq(1,K, by=1)
k=log(K)
d=log(Nc)
Tbar=(exp(2*c*k)*(1-exp(-2*c*d))-2*c*d) / (2*mu*c) # Eq 4.3
plot(Nc, Tbar, type = 'l', xlab = "Initial population size, Nc", ylab = "Mean time to extinction, Tbar", main = "Populations starting below K = 200")
K = seq(1,50, by = 0.1)
k = log(K)
Tbar = (K^(2*c) - 1 - 2*c*k)/(2*mu*c) # Eq. 4.4
plot(K, Tbar, type = 'l', xlab="Carrying Capacity, K", ylab="Mean time to extinction, Tbar", main="Populations starting at K")
# R code to plot the mean time to extinction for the ceiling model as functions of the carrying capacity and at three different population growth rates
mu1 = 0.1 # positive population growth rate
mu2 = 0.001 # barely positive population growth rate. Note that if mu = 0, then there is no feasible solution to the Tbar equation.
mu3 = -0.1 # negative population growth rate
s2 = 0.1 # variance of log population growth rate
c1 = mu1/s2
c2 = mu2/s2
c3 = mu3/s2
# Plot mean time to extinction (N=1) vs. K for populations starting at K, according to equation 4.4
K = seq(1,50, by = 0.1)
k = log(K)
Tbar1 = (K^(2*c1) - 1 - 2*c1*k)/(2*mu1*c1) # Eq. 4.4
Tbar2 = (K^(2*c2) - 1 - 2*c2*k)/(2*mu2*c2)
Tbar3 = (K^(2*c3) - 1 - 2*c3*k)/(2*mu3*c3)
K_Tbar_matrix <- cbind(K, Tbar1, Tbar2, Tbar3)
matplot(K_Tbar_matrix[ ,1], K_Tbar_matrix[ ,2:4], type = "l", col=1:3, ylim=c(0,200), main="Effect of mu on mean time to extinction (Tbar)", ylab="Mean time to exinction, Tbar", xlab = "Carrying capacity, K")
legend("topright", legend = c("mu = 0.1", "mu = 0.001", "mu = -0.1"), lty=1:3, col=1:3, bty="n")
mu = 0.1 # mean log population growth rate
s2 = 0.1 # variance of log population growth rate
c = mu/s2
# Plot mean time to extinction (N=1) vs. K for populations starting at K, according to equation 4.4
K = seq(1,50, by = 0.1)
k = log(K)
Tbar = (K^(2*c) - 1 - 2*c*k)/(2*mu*c) # Eq. 4.4
plot(K, Tbar, type = 'l', xlab="Carrying Capacity, K", ylab="Mean time to extinction, Tbar", main="Populations starting at K")
, according to equation 4.3
K=200
Nc=seq(1,K, by=1)
k=log(K)
d=log(Nc)
Tbar=(exp(2*c*k)*(1-exp(-2*c*d))-2*c*d) / (2*mu*c) # Eq 4.3
plot(Nc, Tbar, type = 'l', xlab = "Initial population size, Nc", ylab = "Mean time to extinction, Tbar", main = "Populations starting below K = 200")
allee <- nls(log_pop_growth ~ r*-B*Nt*log(Nt/(A+Nt)), data = JRC_data, start = list(r = 0.5, B = 0.1, A = 10))
library(AICcmodavg) # functions for calculated corrected AIC with relatively low samples size
### JRC data
year_t <- seq(1960,1986,by=1)
Nt <- c(90, 175,40,45,175,200,425,425,800,256,713,198,1819,575,567,1819,7227,852,216,244,267,1753,999,1788,143,79,94)
log_pop_growth <- c(.6650,-1.4759,.1178,1.3581,.1335,.7538,0,.6325,-1.1394,1.0243,-1.2812,2.2178,-1.1517,-0.0140,1.1657,1.3795,-2.1380,-1.3723,.1219,.0901,1.8818,-.5623,.5821,-2.5260,-0.5934,.1738, NA) # log(Nt+1/Nt), response variable in the model
JRC_data <- cbind.data.frame(year_t, Nt, log_pop_growth)
### Visual check for negative density-dependence
ggplot(data = JRC_data, aes(x = Nt, y = log_pop_growth)) + geom_point() + stat_smooth(method = lm) + theme_axisL_legend + ylab("log Population Growth Rate") + xlab("Population Size")
### compare fit of 3 different models
# log_pop_growth ~ r : density independent model (K goes to infinity in theta-logistic model)
# log_pop_growth ~ r*(1-Nt/K) : Ricker model (theta = 1 for theta-logistic model)
# log_pop_growth ~ r*(1-(Nt/K)^theta) : theta-logistic model
# log_pop_growth ~ r*-B*Nt*log(Nt/(A+Nt)) : allee effect model. "B" determines the strength of negative density dependence.
### fit nonlinear least squares models
independ <- nls(log_pop_growth ~ r, data = JRC_data, start = list(r = 0.5))
summary(independ)
logLik(independ) # calculate maximum log likelihood estimate
ricker <- nls(log_pop_growth ~ r*(1-Nt/K), data = JRC_data, start = list(r = 0.5, K = 400))
summary(ricker)
logLik(ricker)
theta_logistic <- nls(log_pop_growth ~ r*(1-(Nt/K)^theta), data = JRC_data, start = list(r = 0.5, K = 400, theta = 0.2))
summary(theta_logistic)
logLik(theta_logistic)
allee <- nls(log_pop_growth ~ r*-B*Nt*log(Nt/(A+Nt)), data = JRC_data, start = list(r = 0.5, B = 0.1, A = 10))
NT
NT
Nt
JRC_data
allee <- nls(log_pop_growth ~ r*-B*Nt*log(Nt/(A+Nt)), data = JRC_data, start = list(r = 0.5, B = 0.1, A = 10))
allee <- nls(log_pop_growth ~ r*-B*Nt*log(Nt/(A+Nt)), data = JRC_data, start = list(r = 0.5, B = 0.1, A = 0))
allee <- nls(log_pop_growth ~ r*-B*Nt*log(Nt/(A+Nt)), data = JRC_data, start = list(r = 0.5, B = 0.1, A = -1))
allee <- nls(log_pop_growth ~ r*-B*Nt*log(Nt/(A+Nt)), data = JRC_data, start = list(r = 0.5, B = 0.1, A = 10))
